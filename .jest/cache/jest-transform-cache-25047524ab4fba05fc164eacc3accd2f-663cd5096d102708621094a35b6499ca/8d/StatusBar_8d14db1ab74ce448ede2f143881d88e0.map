{"version":3,"sources":["StatusBar.js"],"names":["Platform","require","React","processColor","mergePropsStack","propsStack","defaultValues","reduce","prev","cur","prop","createStackEntry","props","backgroundColor","value","animated","barStyle","translucent","hidden","transition","showHideTransition","networkActivityIndicatorVisible","StatusBar","_stackEntry","pushStackEntry","popStackEntry","replaceStackEntry","animation","_defaultProps","OS","NativeStatusBarManager","setHidden","style","setStyle","visible","console","warn","setNetworkActivityIndicatorVisible","color","processedColor","setColor","setTranslucent","entry","_propsStack","push","_updatePropsStack","index","indexOf","splice","newEntry","Component","select","android","getConstants","DEFAULT_BACKGROUND_COLOR","ios","_updateImmediate","_currentValues","currentHeight","HEIGHT","defaultProps","clearImmediate","setImmediate","oldProps","mergedProps","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\n\nconst processColor = require('../../StyleSheet/processColor');\n\nimport NativeStatusBarManager from './NativeStatusBarManager';\n\n/**\n * Status bar style\n */\nexport type StatusBarStyle = $Keys<{\n  /**\n   * Default status bar style (dark for iOS, light for Android)\n   */\n  default: string,\n  /**\n   * Dark background, white texts and icons\n   */\n  'light-content': string,\n  /**\n   * Light background, dark texts and icons\n   */\n  'dark-content': string,\n}>;\n\n/**\n * Status bar animation\n */\nexport type StatusBarAnimation = $Keys<{\n  /**\n   * No animation\n   */\n  none: string,\n  /**\n   * Fade animation\n   */\n  fade: string,\n  /**\n   * Slide animation\n   */\n  slide: string,\n}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * The background color of the status bar.\n   * @platform android\n   */\n  backgroundColor?: ?string,\n  /**\n   * If the status bar is translucent.\n   * When translucent is set to true, the app will draw under the status bar.\n   * This is useful when using a semi transparent status bar color.\n   *\n   * @platform android\n   */\n  translucent?: ?boolean,\n|}>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * If the network activity indicator should be visible.\n   *\n   * @platform ios\n   */\n  networkActivityIndicatorVisible?: ?boolean,\n  /**\n   * The transition effect when showing and hiding the status bar using the `hidden`\n   * prop. Defaults to 'fade'.\n   *\n   * @platform ios\n   */\n  showHideTransition?: ?('fade' | 'slide'),\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...AndroidProps,\n  ...IOSProps,\n  /**\n   * If the status bar is hidden.\n   */\n  hidden?: ?boolean,\n  /**\n   * If the transition between status bar property changes should be animated.\n   * Supported for backgroundColor, barStyle and hidden.\n   */\n  animated?: ?boolean,\n  /**\n   * Sets the color of the status bar text.\n   */\n  barStyle?: ?('default' | 'light-content' | 'dark-content'),\n|}>;\n\n/**\n * Merges the prop stack with the default values.\n */\nfunction mergePropsStack(\n  propsStack: Array<Object>,\n  defaultValues: Object,\n): Object {\n  return propsStack.reduce((prev, cur) => {\n    for (const prop in cur) {\n      if (cur[prop] != null) {\n        prev[prop] = cur[prop];\n      }\n    }\n    return prev;\n  }, Object.assign({}, defaultValues));\n}\n\n/**\n * Returns an object to insert in the props stack from the props\n * and the transition/animation info.\n */\nfunction createStackEntry(props: any): any {\n  return {\n    backgroundColor:\n      props.backgroundColor != null\n        ? {\n            value: props.backgroundColor,\n            animated: props.animated,\n          }\n        : null,\n    barStyle:\n      props.barStyle != null\n        ? {\n            value: props.barStyle,\n            animated: props.animated,\n          }\n        : null,\n    translucent: props.translucent,\n    hidden:\n      props.hidden != null\n        ? {\n            value: props.hidden,\n            animated: props.animated,\n            transition: props.showHideTransition,\n          }\n        : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible,\n  };\n}\n\n/**\n * Component to control the app status bar.\n *\n * ### Usage with Navigator\n *\n * It is possible to have multiple `StatusBar` components mounted at the same\n * time. The props will be merged in the order the `StatusBar` components were\n * mounted. One use case is to specify status bar styles per route using `Navigator`.\n *\n * ```\n *  <View>\n *    <StatusBar\n *      backgroundColor=\"blue\"\n *      barStyle=\"light-content\"\n *    />\n *    <Navigator\n *      initialRoute={{statusBarHidden: true}}\n *      renderScene={(route, navigator) =>\n *        <View>\n *          <StatusBar hidden={route.statusBarHidden} />\n *          ...\n *        </View>\n *      }\n *    />\n *  </View>\n * ```\n *\n * ### Imperative API\n *\n * For cases where using a component is not ideal, there are static methods\n * to manipulate the `StatusBar` display stack. These methods have the same\n * behavior as mounting and unmounting a `StatusBar` component.\n *\n * For example, you can call `StatusBar.pushStackEntry` to update the status bar\n * before launching a third-party native UI component, and then call\n * `StatusBar.popStackEntry` when completed.\n *\n * ```\n * const openThirdPartyBugReporter = async () => {\n *   // The bug reporter has a dark background, so we push a new status bar style.\n *   const stackEntry = StatusBar.pushStackEntry({barStyle: 'light-content'});\n *\n *   // `open` returns a promise that resolves when the UI is dismissed.\n *   await BugReporter.open();\n *\n *   // Don't forget to call `popStackEntry` when you're done.\n *   StatusBar.popStackEntry(stackEntry);\n * };\n * ```\n *\n * There is a legacy imperative API that enables you to manually update the\n * status bar styles. However, the legacy API does not update the internal\n * `StatusBar` display stack, which means that any changes will be overridden\n * whenever a `StatusBar` component is mounted or unmounted.\n *\n * It is strongly advised that you use `pushStackEntry`, `popStackEntry`, or\n * `replaceStackEntry` instead of the static methods beginning with `set`.\n *\n * ### Constants\n *\n * `currentHeight` (Android only) The height of the status bar.\n */\nclass StatusBar extends React.Component<Props> {\n  static _propsStack = [];\n\n  static _defaultProps = createStackEntry({\n    animated: false,\n    showHideTransition: 'fade',\n    backgroundColor: Platform.select({\n      android:\n        NativeStatusBarManager.getConstants().DEFAULT_BACKGROUND_COLOR ??\n        'black',\n      ios: 'black',\n    }),\n    barStyle: 'default',\n    translucent: false,\n    hidden: false,\n    networkActivityIndicatorVisible: false,\n  });\n\n  // Timer for updating the native module values at the end of the frame.\n  static _updateImmediate = null;\n\n  // The current merged values from the props stack.\n  static _currentValues = null;\n\n  // TODO(janic): Provide a real API to deal with status bar height. See the\n  // discussion in #6195.\n  /**\n   * The current height of the status bar on the device.\n   *\n   * @platform android\n   */\n  static currentHeight: number = NativeStatusBarManager.getConstants().HEIGHT;\n\n  // Provide an imperative API as static functions of the component.\n  // See the corresponding prop for more detail.\n\n  /**\n   * Show or hide the status bar\n   * @param hidden Hide the status bar.\n   * @param animation Optional animation when\n   *    changing the status bar hidden property.\n   */\n  static setHidden(hidden: boolean, animation?: StatusBarAnimation) {\n    animation = animation || 'none';\n    StatusBar._defaultProps.hidden.value = hidden;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManager.setHidden(hidden, animation);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManager.setHidden(hidden);\n    }\n  }\n\n  /**\n   * Set the status bar style\n   * @param style Status bar style to set\n   * @param animated Animate the style change.\n   */\n  static setBarStyle(style: StatusBarStyle, animated?: boolean) {\n    animated = animated || false;\n    StatusBar._defaultProps.barStyle.value = style;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManager.setStyle(style, animated);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManager.setStyle(style);\n    }\n  }\n\n  /**\n   * Control the visibility of the network activity indicator\n   * @param visible Show the indicator.\n   */\n  static setNetworkActivityIndicatorVisible(visible: boolean) {\n    if (Platform.OS !== 'ios') {\n      console.warn(\n        '`setNetworkActivityIndicatorVisible` is only available on iOS',\n      );\n      return;\n    }\n    StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n    NativeStatusBarManager.setNetworkActivityIndicatorVisible(visible);\n  }\n\n  /**\n   * Set the background color for the status bar\n   * @param color Background color.\n   * @param animated Animate the style change.\n   */\n  static setBackgroundColor(color: string, animated?: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColor` is only available on Android');\n      return;\n    }\n    animated = animated || false;\n    StatusBar._defaultProps.backgroundColor.value = color;\n\n    const processedColor = processColor(color);\n    if (processedColor == null) {\n      console.warn(\n        `\\`StatusBar.setBackgroundColor\\`: Color ${color} parsed to null or undefined`,\n      );\n      return;\n    }\n\n    NativeStatusBarManager.setColor(processedColor, animated);\n  }\n\n  /**\n   * Control the translucency of the status bar\n   * @param translucent Set as translucent.\n   */\n  static setTranslucent(translucent: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setTranslucent` is only available on Android');\n      return;\n    }\n    StatusBar._defaultProps.translucent = translucent;\n    NativeStatusBarManager.setTranslucent(translucent);\n  }\n\n  /**\n   * Push a StatusBar entry onto the stack.\n   * The return value should be passed to `popStackEntry` when complete.\n   *\n   * @param props Object containing the StatusBar props to use in the stack entry.\n   */\n  static pushStackEntry(props: any): any {\n    const entry = createStackEntry(props);\n    StatusBar._propsStack.push(entry);\n    StatusBar._updatePropsStack();\n    return entry;\n  }\n\n  /**\n   * Pop a StatusBar entry from the stack.\n   *\n   * @param entry Entry returned from `pushStackEntry`.\n   */\n  static popStackEntry(entry: any) {\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack.splice(index, 1);\n    }\n    StatusBar._updatePropsStack();\n  }\n\n  /**\n   * Replace an existing StatusBar stack entry with new props.\n   *\n   * @param entry Entry returned from `pushStackEntry` to replace.\n   * @param props Object containing the StatusBar props to use in the replacement stack entry.\n   */\n  static replaceStackEntry(entry: any, props: any): any {\n    const newEntry = createStackEntry(props);\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack[index] = newEntry;\n    }\n    StatusBar._updatePropsStack();\n    return newEntry;\n  }\n\n  static defaultProps: $TEMPORARY$object<{|\n    animated: boolean,\n    showHideTransition: $TEMPORARY$string<'fade'>,\n  |}> = {\n    animated: false,\n    showHideTransition: 'fade',\n  };\n\n  _stackEntry = null;\n\n  componentDidMount() {\n    // Every time a StatusBar component is mounted, we push it's prop to a stack\n    // and always update the native status bar with the props from the top of then\n    // stack. This allows having multiple StatusBar components and the one that is\n    // added last or is deeper in the view hierarchy will have priority.\n    this._stackEntry = StatusBar.pushStackEntry(this.props);\n  }\n\n  componentWillUnmount() {\n    // When a StatusBar is unmounted, remove itself from the stack and update\n    // the native bar with the next props.\n    StatusBar.popStackEntry(this._stackEntry);\n  }\n\n  componentDidUpdate() {\n    this._stackEntry = StatusBar.replaceStackEntry(\n      this._stackEntry,\n      this.props,\n    );\n  }\n\n  /**\n   * Updates the native status bar with the props from the stack.\n   */\n  static _updatePropsStack = () => {\n    // Send the update to the native module only once at the end of the frame.\n    clearImmediate(StatusBar._updateImmediate);\n    StatusBar._updateImmediate = setImmediate(() => {\n      const oldProps = StatusBar._currentValues;\n      const mergedProps = mergePropsStack(\n        StatusBar._propsStack,\n        StatusBar._defaultProps,\n      );\n\n      // Update the props that have changed using the merged values from the props stack.\n      if (Platform.OS === 'ios') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          NativeStatusBarManager.setStyle(\n            mergedProps.barStyle.value,\n            mergedProps.barStyle.animated || false,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManager.setHidden(\n            mergedProps.hidden.value,\n            mergedProps.hidden.animated\n              ? mergedProps.hidden.transition\n              : 'none',\n          );\n        }\n\n        if (\n          !oldProps ||\n          oldProps.networkActivityIndicatorVisible !==\n            mergedProps.networkActivityIndicatorVisible\n        ) {\n          NativeStatusBarManager.setNetworkActivityIndicatorVisible(\n            mergedProps.networkActivityIndicatorVisible,\n          );\n        }\n      } else if (Platform.OS === 'android') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          NativeStatusBarManager.setStyle(mergedProps.barStyle.value);\n        }\n        if (\n          !oldProps ||\n          oldProps.backgroundColor.value !== mergedProps.backgroundColor.value\n        ) {\n          const processedColor = processColor(\n            mergedProps.backgroundColor.value,\n          );\n          if (processedColor == null) {\n            console.warn(\n              `\\`StatusBar._updatePropsStack\\`: Color ${\n                mergedProps.backgroundColor.value\n              } parsed to null or undefined`,\n            );\n          } else {\n            NativeStatusBarManager.setColor(\n              processedColor,\n              mergedProps.backgroundColor.animated,\n            );\n          }\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManager.setHidden(mergedProps.hidden.value);\n        }\n        if (!oldProps || oldProps.translucent !== mergedProps.translucent) {\n          NativeStatusBarManager.setTranslucent(mergedProps.translucent);\n        }\n      }\n      // Update the current prop values.\n      StatusBar._currentValues = mergedProps;\n    });\n  };\n\n  render(): React.Node {\n    return null;\n  }\n}\n\nmodule.exports = StatusBar;\n"]}