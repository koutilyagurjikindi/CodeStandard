56976f7b2b3899937b7bf9fadf790c2a
'use strict';

var invariant = require('invariant');

var warnOnce = require('../Utilities/warnOnce');

module.exports = {
  get AccessibilityInfo() {
    return require('../Components/AccessibilityInfo/AccessibilityInfo');
  },

  get ActivityIndicator() {
    return require('../Components/ActivityIndicator/ActivityIndicator');
  },

  get ART() {
    warnOnce('art-moved', 'React Native ART has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/art' instead of 'react-native'. " + 'See https://github.com/react-native-community/art');
    return require('../ART/ReactNativeART');
  },

  get Button() {
    return require('../Components/Button');
  },

  get CheckBox() {
    warnOnce('checkBox-moved', 'CheckBox has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/checkbox' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-checkbox');
    return require('../Components/CheckBox/CheckBox');
  },

  get DatePickerIOS() {
    warnOnce('DatePickerIOS-merged', 'DatePickerIOS has been merged with DatePickerAndroid and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-datetimepicker');
    return require('../Components/DatePicker/DatePickerIOS');
  },

  get DrawerLayoutAndroid() {
    return require('../Components/DrawerAndroid/DrawerLayoutAndroid');
  },

  get FlatList() {
    return require('../Lists/FlatList');
  },

  get Image() {
    return require('../Image/Image');
  },

  get ImageBackground() {
    return require('../Image/ImageBackground');
  },

  get InputAccessoryView() {
    return require('../Components/TextInput/InputAccessoryView');
  },

  get KeyboardAvoidingView() {
    return require('../Components/Keyboard/KeyboardAvoidingView');
  },

  get MaskedViewIOS() {
    warnOnce('maskedviewios-moved', 'MaskedViewIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/masked-view' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-masked-view');
    return require('../Components/MaskedView/MaskedViewIOS');
  },

  get Modal() {
    return require('../Modal/Modal');
  },

  get Picker() {
    return require('../Components/Picker/Picker');
  },

  get PickerIOS() {
    return require('../Components/Picker/PickerIOS');
  },

  get ProgressBarAndroid() {
    return require('../Components/ProgressBarAndroid/ProgressBarAndroid');
  },

  get ProgressViewIOS() {
    return require('../Components/ProgressViewIOS/ProgressViewIOS');
  },

  get SafeAreaView() {
    return require('../Components/SafeAreaView/SafeAreaView');
  },

  get ScrollView() {
    return require('../Components/ScrollView/ScrollView');
  },

  get SectionList() {
    return require('../Lists/SectionList');
  },

  get SegmentedControlIOS() {
    return require('../Components/SegmentedControlIOS/SegmentedControlIOS');
  },

  get Slider() {
    warnOnce('slider-moved', 'Slider has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/slider' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-slider');
    return require('../Components/Slider/Slider');
  },

  get Switch() {
    return require('../Components/Switch/Switch');
  },

  get RefreshControl() {
    return require('../Components/RefreshControl/RefreshControl');
  },

  get StatusBar() {
    return require('../Components/StatusBar/StatusBar');
  },

  get Text() {
    return require('../Text/Text');
  },

  get TextInput() {
    return require('../Components/TextInput/TextInput');
  },

  get Touchable() {
    return require('../Components/Touchable/Touchable');
  },

  get TouchableHighlight() {
    return require('../Components/Touchable/TouchableHighlight');
  },

  get TouchableNativeFeedback() {
    return require('../Components/Touchable/TouchableNativeFeedback');
  },

  get TouchableOpacity() {
    return require('../Components/Touchable/TouchableOpacity');
  },

  get TouchableWithoutFeedback() {
    return require('../Components/Touchable/TouchableWithoutFeedback');
  },

  get View() {
    return require('../Components/View/View');
  },

  get VirtualizedList() {
    return require('../Lists/VirtualizedList');
  },

  get VirtualizedSectionList() {
    return require('../Lists/VirtualizedSectionList');
  },

  get ActionSheetIOS() {
    return require('../ActionSheetIOS/ActionSheetIOS');
  },

  get Alert() {
    return require('../Alert/Alert');
  },

  get Animated() {
    return require('../Animated/src/Animated');
  },

  get AppRegistry() {
    return require('../ReactNative/AppRegistry');
  },

  get AppState() {
    return require('../AppState/AppState');
  },

  get AsyncStorage() {
    warnOnce('async-storage-moved', 'AsyncStorage has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/async-storage' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-async-storage');
    return require('../Storage/AsyncStorage');
  },

  get BackHandler() {
    return require('../Utilities/BackHandler');
  },

  get Clipboard() {
    return require('../Components/Clipboard/Clipboard');
  },

  get DatePickerAndroid() {
    warnOnce('DatePickerAndroid-merged', 'DatePickerAndroid has been merged with DatePickerIOS and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-datetimepicker');
    return require('../Components/DatePickerAndroid/DatePickerAndroid');
  },

  get DeviceInfo() {
    return require('../Utilities/DeviceInfo');
  },

  get Dimensions() {
    return require('../Utilities/Dimensions');
  },

  get Easing() {
    return require('../Animated/src/Easing');
  },

  get findNodeHandle() {
    return require('../Renderer/shims/ReactNative').findNodeHandle;
  },

  get I18nManager() {
    return require('../ReactNative/I18nManager');
  },

  get ImagePickerIOS() {
    warnOnce('imagePickerIOS-moved', 'ImagePickerIOS has been extracted from react-native core and will be removed in a future release. ' + "Please upgrade to use either '@react-native-community/react-native-image-picker' or 'expo-image-picker'. " + "If you cannot upgrade to a different library, please install the deprecated '@react-native-community/image-picker-ios' package. " + 'See https://github.com/react-native-community/react-native-image-picker-ios');
    return require('../Image/ImagePickerIOS');
  },

  get InteractionManager() {
    return require('../Interaction/InteractionManager');
  },

  get Keyboard() {
    return require('../Components/Keyboard/Keyboard');
  },

  get LayoutAnimation() {
    return require('../LayoutAnimation/LayoutAnimation');
  },

  get Linking() {
    return require('../Linking/Linking');
  },

  get NativeDialogManagerAndroid() {
    return require('../NativeModules/specs/NativeDialogManagerAndroid').default;
  },

  get NativeEventEmitter() {
    return require('../EventEmitter/NativeEventEmitter');
  },

  get PanResponder() {
    return require('../Interaction/PanResponder');
  },

  get PermissionsAndroid() {
    return require('../PermissionsAndroid/PermissionsAndroid');
  },

  get PixelRatio() {
    return require('../Utilities/PixelRatio');
  },

  get PushNotificationIOS() {
    warnOnce('pushNotificationIOS-moved', 'PushNotificationIOS has been extracted from react-native core and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/push-notification-ios' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-push-notification-ios');
    return require('../PushNotificationIOS/PushNotificationIOS');
  },

  get Settings() {
    return require('../Settings/Settings');
  },

  get Share() {
    return require('../Share/Share');
  },

  get StatusBarIOS() {
    warnOnce('StatusBarIOS-merged', 'StatusBarIOS has been merged with StatusBar and will be removed in a future release. Use StatusBar for mutating the status bar');
    return require('../Components/StatusBar/StatusBarIOS');
  },

  get StyleSheet() {
    return require('../StyleSheet/StyleSheet');
  },

  get Systrace() {
    return require('../Performance/Systrace');
  },

  get TimePickerAndroid() {
    warnOnce('TimePickerAndroid-merged', 'TimePickerAndroid has been merged with DatePickerIOS and DatePickerAndroid and will be removed in a future release. ' + "It can now be installed and imported from '@react-native-community/datetimepicker' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-datetimepicker');
    return require('../Components/TimePickerAndroid/TimePickerAndroid');
  },

  get ToastAndroid() {
    return require('../Components/ToastAndroid/ToastAndroid');
  },

  get TurboModuleRegistry() {
    return require('../TurboModule/TurboModuleRegistry');
  },

  get TVEventHandler() {
    return require('../Components/AppleTV/TVEventHandler');
  },

  get UIManager() {
    return require('../ReactNative/UIManager');
  },

  get unstable_batchedUpdates() {
    return require('../Renderer/shims/ReactNative').unstable_batchedUpdates;
  },

  get useWindowDimensions() {
    return require('../Utilities/useWindowDimensions').default;
  },

  get UTFSequence() {
    return require('../UTFSequence');
  },

  get Vibration() {
    return require('../Vibration/Vibration');
  },

  get YellowBox() {
    return require('../YellowBox/YellowBox');
  },

  get DeviceEventEmitter() {
    return require('../EventEmitter/RCTDeviceEventEmitter');
  },

  get NativeAppEventEmitter() {
    return require('../EventEmitter/RCTNativeAppEventEmitter');
  },

  get NativeModules() {
    return require('../BatchedBridge/NativeModules');
  },

  get Platform() {
    return require('../Utilities/Platform');
  },

  get processColor() {
    return require('../StyleSheet/processColor');
  },

  get requireNativeComponent() {
    return require('../ReactNative/requireNativeComponent');
  },

  get unstable_RootTagContext() {
    return require('../ReactNative/RootTagContext');
  },

  get ColorPropType() {
    return require('../DeprecatedPropTypes/DeprecatedColorPropType');
  },

  get EdgeInsetsPropType() {
    return require('../DeprecatedPropTypes/DeprecatedEdgeInsetsPropType');
  },

  get PointPropType() {
    return require('../DeprecatedPropTypes/DeprecatedPointPropType');
  },

  get ViewPropTypes() {
    return require('../DeprecatedPropTypes/DeprecatedViewPropTypes');
  }

};

if (__DEV__) {
  Object.defineProperty(module.exports, 'ListView', {
    configurable: true,
    get: function get() {
      invariant(false, 'ListView has been removed from React Native. ' + 'See https://fb.me/nolistview for more information or use ' + '`deprecated-react-native-listview`.');
    }
  });
  Object.defineProperty(module.exports, 'SwipeableListView', {
    configurable: true,
    get: function get() {
      invariant(false, 'SwipeableListView has been removed from React Native. ' + 'See https://fb.me/nolistview for more information or use ' + '`deprecated-react-native-swipeable-listview`.');
    }
  });
  Object.defineProperty(module.exports, 'WebView', {
    configurable: true,
    get: function get() {
      invariant(false, 'WebView has been removed from React Native. ' + "It can now be installed and imported from 'react-native-webview' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-webview');
    }
  });
  Object.defineProperty(module.exports, 'NetInfo', {
    configurable: true,
    get: function get() {
      invariant(false, 'NetInfo has been removed from React Native. ' + "It can now be installed and imported from 'react-native-netinfo' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-netinfo');
    }
  });
  Object.defineProperty(module.exports, 'CameraRoll', {
    configurable: true,
    get: function get() {
      invariant(false, 'CameraRoll has been removed from React Native. ' + "It can now be installed and imported from 'react-native-cameraroll' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-cameraroll');
    }
  });
  Object.defineProperty(module.exports, 'ImageStore', {
    configurable: true,
    get: function get() {
      invariant(false, 'ImageStore has been removed from React Native. ' + 'To get a base64-encoded string from a local image use either of the following third-party libraries:' + "* expo-file-system: `readAsStringAsync(filepath, 'base64')`" + "* react-native-fs: `readFile(filepath, 'base64')`");
    }
  });
  Object.defineProperty(module.exports, 'ImageEditor', {
    configurable: true,
    get: function get() {
      invariant(false, 'ImageEditor has been removed from React Native. ' + "It can now be installed and imported from 'react-native-image-editor' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-image-editor');
    }
  });
  Object.defineProperty(module.exports, 'ViewPagerAndroid', {
    configurable: true,
    get: function get() {
      invariant(false, 'ViewPagerAndroid has been removed from React Native. ' + "It can now be installed and imported from 'react-native-viewpager' instead of 'react-native'. " + 'See https://github.com/react-native-community/react-native-viewpager');
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LW5hdGl2ZS1pbXBsZW1lbnRhdGlvbi5qcyJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwid2Fybk9uY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiQWNjZXNzaWJpbGl0eUluZm8iLCJBY3Rpdml0eUluZGljYXRvciIsIkFSVCIsIkJ1dHRvbiIsIkNoZWNrQm94IiwiRGF0ZVBpY2tlcklPUyIsIkRyYXdlckxheW91dEFuZHJvaWQiLCJGbGF0TGlzdCIsIkltYWdlIiwiSW1hZ2VCYWNrZ3JvdW5kIiwiSW5wdXRBY2Nlc3NvcnlWaWV3IiwiS2V5Ym9hcmRBdm9pZGluZ1ZpZXciLCJNYXNrZWRWaWV3SU9TIiwiTW9kYWwiLCJQaWNrZXIiLCJQaWNrZXJJT1MiLCJQcm9ncmVzc0JhckFuZHJvaWQiLCJQcm9ncmVzc1ZpZXdJT1MiLCJTYWZlQXJlYVZpZXciLCJTY3JvbGxWaWV3IiwiU2VjdGlvbkxpc3QiLCJTZWdtZW50ZWRDb250cm9sSU9TIiwiU2xpZGVyIiwiU3dpdGNoIiwiUmVmcmVzaENvbnRyb2wiLCJTdGF0dXNCYXIiLCJUZXh0IiwiVGV4dElucHV0IiwiVG91Y2hhYmxlIiwiVG91Y2hhYmxlSGlnaGxpZ2h0IiwiVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2siLCJUb3VjaGFibGVPcGFjaXR5IiwiVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIiwiVmlldyIsIlZpcnR1YWxpemVkTGlzdCIsIlZpcnR1YWxpemVkU2VjdGlvbkxpc3QiLCJBY3Rpb25TaGVldElPUyIsIkFsZXJ0IiwiQW5pbWF0ZWQiLCJBcHBSZWdpc3RyeSIsIkFwcFN0YXRlIiwiQXN5bmNTdG9yYWdlIiwiQmFja0hhbmRsZXIiLCJDbGlwYm9hcmQiLCJEYXRlUGlja2VyQW5kcm9pZCIsIkRldmljZUluZm8iLCJEaW1lbnNpb25zIiwiRWFzaW5nIiwiZmluZE5vZGVIYW5kbGUiLCJJMThuTWFuYWdlciIsIkltYWdlUGlja2VySU9TIiwiSW50ZXJhY3Rpb25NYW5hZ2VyIiwiS2V5Ym9hcmQiLCJMYXlvdXRBbmltYXRpb24iLCJMaW5raW5nIiwiTmF0aXZlRGlhbG9nTWFuYWdlckFuZHJvaWQiLCJkZWZhdWx0IiwiTmF0aXZlRXZlbnRFbWl0dGVyIiwiUGFuUmVzcG9uZGVyIiwiUGVybWlzc2lvbnNBbmRyb2lkIiwiUGl4ZWxSYXRpbyIsIlB1c2hOb3RpZmljYXRpb25JT1MiLCJTZXR0aW5ncyIsIlNoYXJlIiwiU3RhdHVzQmFySU9TIiwiU3R5bGVTaGVldCIsIlN5c3RyYWNlIiwiVGltZVBpY2tlckFuZHJvaWQiLCJUb2FzdEFuZHJvaWQiLCJUdXJib01vZHVsZVJlZ2lzdHJ5IiwiVFZFdmVudEhhbmRsZXIiLCJVSU1hbmFnZXIiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVzZVdpbmRvd0RpbWVuc2lvbnMiLCJVVEZTZXF1ZW5jZSIsIlZpYnJhdGlvbiIsIlllbGxvd0JveCIsIkRldmljZUV2ZW50RW1pdHRlciIsIk5hdGl2ZUFwcEV2ZW50RW1pdHRlciIsIk5hdGl2ZU1vZHVsZXMiLCJQbGF0Zm9ybSIsInByb2Nlc3NDb2xvciIsInJlcXVpcmVOYXRpdmVDb21wb25lbnQiLCJ1bnN0YWJsZV9Sb290VGFnQ29udGV4dCIsIkNvbG9yUHJvcFR5cGUiLCJFZGdlSW5zZXRzUHJvcFR5cGUiLCJQb2ludFByb3BUeXBlIiwiVmlld1Byb3BUeXBlcyIsIl9fREVWX18iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImdldCJdLCJtYXBwaW5ncyI6IkFBVUE7O0FBRUEsSUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFDQSxJQUFNQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyx1QkFBRCxDQUF4Qjs7QUFHQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBRWYsTUFBSUMsaUJBQUosR0FBd0I7QUFDdEIsV0FBT0osT0FBTyxDQUFDLG1EQUFELENBQWQ7QUFDRCxHQUpjOztBQUtmLE1BQUlLLGlCQUFKLEdBQXdCO0FBQ3RCLFdBQU9M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RSx5RUFKSyxDQUFUO0FBTUQ7QUFUa0QsR0FBckQ7QUFhQThGLEVBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQjVGLE1BQU0sQ0FBQ0MsT0FBN0IsRUFBc0Msa0JBQXRDLEVBQTBEO0FBQ3hENEYsSUFBQUEsWUFBWSxFQUFFLElBRDBDO0FBRXhEQyxJQUFBQSxHQUZ3RCxpQkFFbEQ7QUFDSmpHLE1BQUFBLFNBQVMsQ0FDUCxLQURPLEVBRVAsMERBQ0UsZ0dBREYsR0FFRSxzRUFKSyxDQUFUO0FBTUQ7QUFUdUQsR0FBMUQ7QUFXRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuY29uc3Qgd2Fybk9uY2UgPSByZXF1aXJlKCcuLi9VdGlsaXRpZXMvd2Fybk9uY2UnKTtcblxuLy8gRXhwb3J0IFJlYWN0LCBwbHVzIHNvbWUgbmF0aXZlIGFkZGl0aW9ucy5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBDb21wb25lbnRzXG4gIGdldCBBY2Nlc3NpYmlsaXR5SW5mbygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9BY2Nlc3NpYmlsaXR5SW5mby9BY2Nlc3NpYmlsaXR5SW5mbycpO1xuICB9LFxuICBnZXQgQWN0aXZpdHlJbmRpY2F0b3IoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvQWN0aXZpdHlJbmRpY2F0b3IvQWN0aXZpdHlJbmRpY2F0b3InKTtcbiAgfSxcbiAgZ2V0IEFSVCgpIHtcbiAgICB3YXJuT25jZShcbiAgICAgICdhcnQtbW92ZWQnLFxuICAgICAgJ1JlYWN0IE5hdGl2ZSBBUlQgaGFzIGJlZW4gZXh0cmFjdGVkIGZyb20gcmVhY3QtbmF0aXZlIGNvcmUgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiAnICtcbiAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvYXJ0JyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvYXJ0JyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9BUlQvUmVhY3ROYXRpdmVBUlQnKTtcbiAgfSxcbiAgZ2V0IEJ1dHRvbigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9CdXR0b24nKTtcbiAgfSxcbiAgZ2V0IENoZWNrQm94KCkge1xuICAgIHdhcm5PbmNlKFxuICAgICAgJ2NoZWNrQm94LW1vdmVkJyxcbiAgICAgICdDaGVja0JveCBoYXMgYmVlbiBleHRyYWN0ZWQgZnJvbSByZWFjdC1uYXRpdmUgY29yZSBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuICcgK1xuICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9jaGVja2JveCcgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtY29tbXVuaXR5L3JlYWN0LW5hdGl2ZS1jaGVja2JveCcsXG4gICAgKTtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9DaGVja0JveC9DaGVja0JveCcpO1xuICB9LFxuICBnZXQgRGF0ZVBpY2tlcklPUygpIHtcbiAgICB3YXJuT25jZShcbiAgICAgICdEYXRlUGlja2VySU9TLW1lcmdlZCcsXG4gICAgICAnRGF0ZVBpY2tlcklPUyBoYXMgYmVlbiBtZXJnZWQgd2l0aCBEYXRlUGlja2VyQW5kcm9pZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuICcgK1xuICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9kYXRldGltZXBpY2tlcicgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtY29tbXVuaXR5L3JlYWN0LW5hdGl2ZS1kYXRldGltZXBpY2tlcicsXG4gICAgKTtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9EYXRlUGlja2VyL0RhdGVQaWNrZXJJT1MnKTtcbiAgfSxcbiAgZ2V0IERyYXdlckxheW91dEFuZHJvaWQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvRHJhd2VyQW5kcm9pZC9EcmF3ZXJMYXlvdXRBbmRyb2lkJyk7XG4gIH0sXG4gIGdldCBGbGF0TGlzdCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vTGlzdHMvRmxhdExpc3QnKTtcbiAgfSxcbiAgZ2V0IEltYWdlKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9JbWFnZS9JbWFnZScpO1xuICB9LFxuICBnZXQgSW1hZ2VCYWNrZ3JvdW5kKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9JbWFnZS9JbWFnZUJhY2tncm91bmQnKTtcbiAgfSxcbiAgZ2V0IElucHV0QWNjZXNzb3J5VmlldygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9UZXh0SW5wdXQvSW5wdXRBY2Nlc3NvcnlWaWV3Jyk7XG4gIH0sXG4gIGdldCBLZXlib2FyZEF2b2lkaW5nVmlldygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9LZXlib2FyZC9LZXlib2FyZEF2b2lkaW5nVmlldycpO1xuICB9LFxuICBnZXQgTWFza2VkVmlld0lPUygpIHtcbiAgICB3YXJuT25jZShcbiAgICAgICdtYXNrZWR2aWV3aW9zLW1vdmVkJyxcbiAgICAgICdNYXNrZWRWaWV3SU9TIGhhcyBiZWVuIGV4dHJhY3RlZCBmcm9tIHJlYWN0LW5hdGl2ZSBjb3JlIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gJyArXG4gICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L21hc2tlZC12aWV3JyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLW1hc2tlZC12aWV3JyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db21wb25lbnRzL01hc2tlZFZpZXcvTWFza2VkVmlld0lPUycpO1xuICB9LFxuICBnZXQgTW9kYWwoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL01vZGFsL01vZGFsJyk7XG4gIH0sXG4gIGdldCBQaWNrZXIoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvUGlja2VyL1BpY2tlcicpO1xuICB9LFxuICBnZXQgUGlja2VySU9TKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db21wb25lbnRzL1BpY2tlci9QaWNrZXJJT1MnKTtcbiAgfSxcbiAgZ2V0IFByb2dyZXNzQmFyQW5kcm9pZCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9Qcm9ncmVzc0JhckFuZHJvaWQvUHJvZ3Jlc3NCYXJBbmRyb2lkJyk7XG4gIH0sXG4gIGdldCBQcm9ncmVzc1ZpZXdJT1MoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvUHJvZ3Jlc3NWaWV3SU9TL1Byb2dyZXNzVmlld0lPUycpO1xuICB9LFxuICBnZXQgU2FmZUFyZWFWaWV3KCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db21wb25lbnRzL1NhZmVBcmVhVmlldy9TYWZlQXJlYVZpZXcnKTtcbiAgfSxcbiAgZ2V0IFNjcm9sbFZpZXcoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvU2Nyb2xsVmlldy9TY3JvbGxWaWV3Jyk7XG4gIH0sXG4gIGdldCBTZWN0aW9uTGlzdCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vTGlzdHMvU2VjdGlvbkxpc3QnKTtcbiAgfSxcbiAgZ2V0IFNlZ21lbnRlZENvbnRyb2xJT1MoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvU2VnbWVudGVkQ29udHJvbElPUy9TZWdtZW50ZWRDb250cm9sSU9TJyk7XG4gIH0sXG4gIGdldCBTbGlkZXIoKSB7XG4gICAgd2Fybk9uY2UoXG4gICAgICAnc2xpZGVyLW1vdmVkJyxcbiAgICAgICdTbGlkZXIgaGFzIGJlZW4gZXh0cmFjdGVkIGZyb20gcmVhY3QtbmF0aXZlIGNvcmUgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLiAnICtcbiAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAnQHJlYWN0LW5hdGl2ZS1jb21tdW5pdHkvc2xpZGVyJyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLXNsaWRlcicsXG4gICAgKTtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9TbGlkZXIvU2xpZGVyJyk7XG4gIH0sXG4gIGdldCBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvU3dpdGNoL1N3aXRjaCcpO1xuICB9LFxuICBnZXQgUmVmcmVzaENvbnRyb2woKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvUmVmcmVzaENvbnRyb2wvUmVmcmVzaENvbnRyb2wnKTtcbiAgfSxcbiAgZ2V0IFN0YXR1c0JhcigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9TdGF0dXNCYXIvU3RhdHVzQmFyJyk7XG4gIH0sXG4gIGdldCBUZXh0KCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9UZXh0L1RleHQnKTtcbiAgfSxcbiAgZ2V0IFRleHRJbnB1dCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9UZXh0SW5wdXQvVGV4dElucHV0Jyk7XG4gIH0sXG4gIGdldCBUb3VjaGFibGUoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvVG91Y2hhYmxlL1RvdWNoYWJsZScpO1xuICB9LFxuICBnZXQgVG91Y2hhYmxlSGlnaGxpZ2h0KCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db21wb25lbnRzL1RvdWNoYWJsZS9Ub3VjaGFibGVIaWdobGlnaHQnKTtcbiAgfSxcbiAgZ2V0IFRvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db21wb25lbnRzL1RvdWNoYWJsZS9Ub3VjaGFibGVOYXRpdmVGZWVkYmFjaycpO1xuICB9LFxuICBnZXQgVG91Y2hhYmxlT3BhY2l0eSgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9Ub3VjaGFibGUvVG91Y2hhYmxlT3BhY2l0eScpO1xuICB9LFxuICBnZXQgVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db21wb25lbnRzL1RvdWNoYWJsZS9Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2snKTtcbiAgfSxcbiAgZ2V0IFZpZXcoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvVmlldy9WaWV3Jyk7XG4gIH0sXG4gIGdldCBWaXJ0dWFsaXplZExpc3QoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0xpc3RzL1ZpcnR1YWxpemVkTGlzdCcpO1xuICB9LFxuICBnZXQgVmlydHVhbGl6ZWRTZWN0aW9uTGlzdCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vTGlzdHMvVmlydHVhbGl6ZWRTZWN0aW9uTGlzdCcpO1xuICB9LFxuXG4gIC8vIEFQSXNcbiAgZ2V0IEFjdGlvblNoZWV0SU9TKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9BY3Rpb25TaGVldElPUy9BY3Rpb25TaGVldElPUycpO1xuICB9LFxuICBnZXQgQWxlcnQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0FsZXJ0L0FsZXJ0Jyk7XG4gIH0sXG4gIGdldCBBbmltYXRlZCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQW5pbWF0ZWQvc3JjL0FuaW1hdGVkJyk7XG4gIH0sXG4gIGdldCBBcHBSZWdpc3RyeSgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vUmVhY3ROYXRpdmUvQXBwUmVnaXN0cnknKTtcbiAgfSxcbiAgZ2V0IEFwcFN0YXRlKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9BcHBTdGF0ZS9BcHBTdGF0ZScpO1xuICB9LFxuICBnZXQgQXN5bmNTdG9yYWdlKCkge1xuICAgIHdhcm5PbmNlKFxuICAgICAgJ2FzeW5jLXN0b3JhZ2UtbW92ZWQnLFxuICAgICAgJ0FzeW5jU3RvcmFnZSBoYXMgYmVlbiBleHRyYWN0ZWQgZnJvbSByZWFjdC1uYXRpdmUgY29yZSBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuICcgK1xuICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9hc3luYy1zdG9yYWdlJyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLWFzeW5jLXN0b3JhZ2UnLFxuICAgICk7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1N0b3JhZ2UvQXN5bmNTdG9yYWdlJyk7XG4gIH0sXG4gIGdldCBCYWNrSGFuZGxlcigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL0JhY2tIYW5kbGVyJyk7XG4gIH0sXG4gIGdldCBDbGlwYm9hcmQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvQ2xpcGJvYXJkL0NsaXBib2FyZCcpO1xuICB9LFxuICBnZXQgRGF0ZVBpY2tlckFuZHJvaWQoKSB7XG4gICAgd2Fybk9uY2UoXG4gICAgICAnRGF0ZVBpY2tlckFuZHJvaWQtbWVyZ2VkJyxcbiAgICAgICdEYXRlUGlja2VyQW5kcm9pZCBoYXMgYmVlbiBtZXJnZWQgd2l0aCBEYXRlUGlja2VySU9TIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gJyArXG4gICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L2RhdGV0aW1lcGlja2VyJyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLWRhdGV0aW1lcGlja2VyJyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db21wb25lbnRzL0RhdGVQaWNrZXJBbmRyb2lkL0RhdGVQaWNrZXJBbmRyb2lkJyk7XG4gIH0sXG4gIGdldCBEZXZpY2VJbmZvKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9VdGlsaXRpZXMvRGV2aWNlSW5mbycpO1xuICB9LFxuICBnZXQgRGltZW5zaW9ucygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL0RpbWVuc2lvbnMnKTtcbiAgfSxcbiAgZ2V0IEVhc2luZygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQW5pbWF0ZWQvc3JjL0Vhc2luZycpO1xuICB9LFxuICBnZXQgZmluZE5vZGVIYW5kbGUoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlJykuZmluZE5vZGVIYW5kbGU7XG4gIH0sXG4gIGdldCBJMThuTWFuYWdlcigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vUmVhY3ROYXRpdmUvSTE4bk1hbmFnZXInKTtcbiAgfSxcbiAgZ2V0IEltYWdlUGlja2VySU9TKCkge1xuICAgIHdhcm5PbmNlKFxuICAgICAgJ2ltYWdlUGlja2VySU9TLW1vdmVkJyxcbiAgICAgICdJbWFnZVBpY2tlcklPUyBoYXMgYmVlbiBleHRyYWN0ZWQgZnJvbSByZWFjdC1uYXRpdmUgY29yZSBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuICcgK1xuICAgICAgICBcIlBsZWFzZSB1cGdyYWRlIHRvIHVzZSBlaXRoZXIgJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L3JlYWN0LW5hdGl2ZS1pbWFnZS1waWNrZXInIG9yICdleHBvLWltYWdlLXBpY2tlcicuIFwiICtcbiAgICAgICAgXCJJZiB5b3UgY2Fubm90IHVwZ3JhZGUgdG8gYSBkaWZmZXJlbnQgbGlicmFyeSwgcGxlYXNlIGluc3RhbGwgdGhlIGRlcHJlY2F0ZWQgJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L2ltYWdlLXBpY2tlci1pb3MnIHBhY2thZ2UuIFwiICtcbiAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLWNvbW11bml0eS9yZWFjdC1uYXRpdmUtaW1hZ2UtcGlja2VyLWlvcycsXG4gICAgKTtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vSW1hZ2UvSW1hZ2VQaWNrZXJJT1MnKTtcbiAgfSxcbiAgZ2V0IEludGVyYWN0aW9uTWFuYWdlcigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vSW50ZXJhY3Rpb24vSW50ZXJhY3Rpb25NYW5hZ2VyJyk7XG4gIH0sXG4gIGdldCBLZXlib2FyZCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vQ29tcG9uZW50cy9LZXlib2FyZC9LZXlib2FyZCcpO1xuICB9LFxuICBnZXQgTGF5b3V0QW5pbWF0aW9uKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9MYXlvdXRBbmltYXRpb24vTGF5b3V0QW5pbWF0aW9uJyk7XG4gIH0sXG4gIGdldCBMaW5raW5nKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9MaW5raW5nL0xpbmtpbmcnKTtcbiAgfSxcbiAgZ2V0IE5hdGl2ZURpYWxvZ01hbmFnZXJBbmRyb2lkKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9OYXRpdmVNb2R1bGVzL3NwZWNzL05hdGl2ZURpYWxvZ01hbmFnZXJBbmRyb2lkJykuZGVmYXVsdDtcbiAgfSxcbiAgZ2V0IE5hdGl2ZUV2ZW50RW1pdHRlcigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vRXZlbnRFbWl0dGVyL05hdGl2ZUV2ZW50RW1pdHRlcicpO1xuICB9LFxuICBnZXQgUGFuUmVzcG9uZGVyKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9JbnRlcmFjdGlvbi9QYW5SZXNwb25kZXInKTtcbiAgfSxcbiAgZ2V0IFBlcm1pc3Npb25zQW5kcm9pZCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vUGVybWlzc2lvbnNBbmRyb2lkL1Blcm1pc3Npb25zQW5kcm9pZCcpO1xuICB9LFxuICBnZXQgUGl4ZWxSYXRpbygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL1BpeGVsUmF0aW8nKTtcbiAgfSxcbiAgZ2V0IFB1c2hOb3RpZmljYXRpb25JT1MoKSB7XG4gICAgd2Fybk9uY2UoXG4gICAgICAncHVzaE5vdGlmaWNhdGlvbklPUy1tb3ZlZCcsXG4gICAgICAnUHVzaE5vdGlmaWNhdGlvbklPUyBoYXMgYmVlbiBleHRyYWN0ZWQgZnJvbSByZWFjdC1uYXRpdmUgY29yZSBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuICcgK1xuICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdAcmVhY3QtbmF0aXZlLWNvbW11bml0eS9wdXNoLW5vdGlmaWNhdGlvbi1pb3MnIGluc3RlYWQgb2YgJ3JlYWN0LW5hdGl2ZScuIFwiICtcbiAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLWNvbW11bml0eS9yZWFjdC1uYXRpdmUtcHVzaC1ub3RpZmljYXRpb24taW9zJyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9QdXNoTm90aWZpY2F0aW9uSU9TL1B1c2hOb3RpZmljYXRpb25JT1MnKTtcbiAgfSxcbiAgZ2V0IFNldHRpbmdzKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9TZXR0aW5ncy9TZXR0aW5ncycpO1xuICB9LFxuICBnZXQgU2hhcmUoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1NoYXJlL1NoYXJlJyk7XG4gIH0sXG4gIGdldCBTdGF0dXNCYXJJT1MoKSB7XG4gICAgd2Fybk9uY2UoXG4gICAgICAnU3RhdHVzQmFySU9TLW1lcmdlZCcsXG4gICAgICAnU3RhdHVzQmFySU9TIGhhcyBiZWVuIG1lcmdlZCB3aXRoIFN0YXR1c0JhciBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuIFVzZSBTdGF0dXNCYXIgZm9yIG11dGF0aW5nIHRoZSBzdGF0dXMgYmFyJyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db21wb25lbnRzL1N0YXR1c0Jhci9TdGF0dXNCYXJJT1MnKTtcbiAgfSxcbiAgZ2V0IFN0eWxlU2hlZXQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCcpO1xuICB9LFxuICBnZXQgU3lzdHJhY2UoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1BlcmZvcm1hbmNlL1N5c3RyYWNlJyk7XG4gIH0sXG4gIGdldCBUaW1lUGlja2VyQW5kcm9pZCgpIHtcbiAgICB3YXJuT25jZShcbiAgICAgICdUaW1lUGlja2VyQW5kcm9pZC1tZXJnZWQnLFxuICAgICAgJ1RpbWVQaWNrZXJBbmRyb2lkIGhhcyBiZWVuIG1lcmdlZCB3aXRoIERhdGVQaWNrZXJJT1MgYW5kIERhdGVQaWNrZXJBbmRyb2lkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS4gJyArXG4gICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ0ByZWFjdC1uYXRpdmUtY29tbXVuaXR5L2RhdGV0aW1lcGlja2VyJyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLWRhdGV0aW1lcGlja2VyJyxcbiAgICApO1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9Db21wb25lbnRzL1RpbWVQaWNrZXJBbmRyb2lkL1RpbWVQaWNrZXJBbmRyb2lkJyk7XG4gIH0sXG4gIGdldCBUb2FzdEFuZHJvaWQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvVG9hc3RBbmRyb2lkL1RvYXN0QW5kcm9pZCcpO1xuICB9LFxuICBnZXQgVHVyYm9Nb2R1bGVSZWdpc3RyeSgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vVHVyYm9Nb2R1bGUvVHVyYm9Nb2R1bGVSZWdpc3RyeScpO1xuICB9LFxuICBnZXQgVFZFdmVudEhhbmRsZXIoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0NvbXBvbmVudHMvQXBwbGVUVi9UVkV2ZW50SGFuZGxlcicpO1xuICB9LFxuICBnZXQgVUlNYW5hZ2VyKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInKTtcbiAgfSxcbiAgZ2V0IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzO1xuICB9LFxuICBnZXQgdXNlV2luZG93RGltZW5zaW9ucygpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vVXRpbGl0aWVzL3VzZVdpbmRvd0RpbWVuc2lvbnMnKS5kZWZhdWx0O1xuICB9LFxuICBnZXQgVVRGU2VxdWVuY2UoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1VURlNlcXVlbmNlJyk7XG4gIH0sXG4gIGdldCBWaWJyYXRpb24oKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1ZpYnJhdGlvbi9WaWJyYXRpb24nKTtcbiAgfSxcbiAgZ2V0IFllbGxvd0JveCgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vWWVsbG93Qm94L1llbGxvd0JveCcpO1xuICB9LFxuXG4gIC8vIFBsdWdpbnNcbiAgZ2V0IERldmljZUV2ZW50RW1pdHRlcigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vRXZlbnRFbWl0dGVyL1JDVERldmljZUV2ZW50RW1pdHRlcicpO1xuICB9LFxuICBnZXQgTmF0aXZlQXBwRXZlbnRFbWl0dGVyKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9FdmVudEVtaXR0ZXIvUkNUTmF0aXZlQXBwRXZlbnRFbWl0dGVyJyk7XG4gIH0sXG4gIGdldCBOYXRpdmVNb2R1bGVzKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9CYXRjaGVkQnJpZGdlL05hdGl2ZU1vZHVsZXMnKTtcbiAgfSxcbiAgZ2V0IFBsYXRmb3JtKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9VdGlsaXRpZXMvUGxhdGZvcm0nKTtcbiAgfSxcbiAgZ2V0IHByb2Nlc3NDb2xvcigpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InKTtcbiAgfSxcbiAgZ2V0IHJlcXVpcmVOYXRpdmVDb21wb25lbnQoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL1JlYWN0TmF0aXZlL3JlcXVpcmVOYXRpdmVDb21wb25lbnQnKTtcbiAgfSxcbiAgZ2V0IHVuc3RhYmxlX1Jvb3RUYWdDb250ZXh0KCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9SZWFjdE5hdGl2ZS9Sb290VGFnQ29udGV4dCcpO1xuICB9LFxuXG4gIC8vIFByb3AgVHlwZXNcbiAgZ2V0IENvbG9yUHJvcFR5cGUoKSB7XG4gICAgcmV0dXJuIHJlcXVpcmUoJy4uL0RlcHJlY2F0ZWRQcm9wVHlwZXMvRGVwcmVjYXRlZENvbG9yUHJvcFR5cGUnKTtcbiAgfSxcbiAgZ2V0IEVkZ2VJbnNldHNQcm9wVHlwZSgpIHtcbiAgICByZXR1cm4gcmVxdWlyZSgnLi4vRGVwcmVjYXRlZFByb3BUeXBlcy9EZXByZWNhdGVkRWRnZUluc2V0c1Byb3BUeXBlJyk7XG4gIH0sXG4gIGdldCBQb2ludFByb3BUeXBlKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9EZXByZWNhdGVkUHJvcFR5cGVzL0RlcHJlY2F0ZWRQb2ludFByb3BUeXBlJyk7XG4gIH0sXG4gIGdldCBWaWV3UHJvcFR5cGVzKCkge1xuICAgIHJldHVybiByZXF1aXJlKCcuLi9EZXByZWNhdGVkUHJvcFR5cGVzL0RlcHJlY2F0ZWRWaWV3UHJvcFR5cGVzJyk7XG4gIH0sXG59O1xuXG5pZiAoX19ERVZfXykge1xuICAvLyAkRmxvd0ZpeE1lIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuIGF0dGVtcHRpbmcgdG8gYWNjZXNzIExpc3RWaWV3LlxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdMaXN0VmlldycsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ0xpc3RWaWV3IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuICcgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9mYi5tZS9ub2xpc3R2aWV3IGZvciBtb3JlIGluZm9ybWF0aW9uIG9yIHVzZSAnICtcbiAgICAgICAgICAnYGRlcHJlY2F0ZWQtcmVhY3QtbmF0aXZlLWxpc3R2aWV3YC4nLFxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcblxuICAvLyAkRmxvd0ZpeE1lIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuIGF0dGVtcHRpbmcgdG8gYWNjZXNzIFN3aXBlYWJsZUxpc3RWaWV3LlxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdTd2lwZWFibGVMaXN0VmlldycsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ1N3aXBlYWJsZUxpc3RWaWV3IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuICcgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9mYi5tZS9ub2xpc3R2aWV3IGZvciBtb3JlIGluZm9ybWF0aW9uIG9yIHVzZSAnICtcbiAgICAgICAgICAnYGRlcHJlY2F0ZWQtcmVhY3QtbmF0aXZlLXN3aXBlYWJsZS1saXN0dmlld2AuJyxcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gJEZsb3dGaXhNZSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlbiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBXZWJWaWV3LlxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdXZWJWaWV3Jywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnV2ViVmlldyBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiAnICtcbiAgICAgICAgICBcIkl0IGNhbiBub3cgYmUgaW5zdGFsbGVkIGFuZCBpbXBvcnRlZCBmcm9tICdyZWFjdC1uYXRpdmUtd2VidmlldycgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLXdlYnZpZXcnLFxuICAgICAgKTtcbiAgICB9LFxuICB9KTtcblxuICAvLyAkRmxvd0ZpeE1lIFRoaXMgaXMgaW50ZW50aW9uYWw6IEZsb3cgd2lsbCBlcnJvciB3aGVuIGF0dGVtcHRpbmcgdG8gYWNjZXNzIE5ldEluZm8uXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ05ldEluZm8nLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldCgpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdOZXRJbmZvIGhhcyBiZWVuIHJlbW92ZWQgZnJvbSBSZWFjdCBOYXRpdmUuICcgK1xuICAgICAgICAgIFwiSXQgY2FuIG5vdyBiZSBpbnN0YWxsZWQgYW5kIGltcG9ydGVkIGZyb20gJ3JlYWN0LW5hdGl2ZS1uZXRpbmZvJyBpbnN0ZWFkIG9mICdyZWFjdC1uYXRpdmUnLiBcIiArXG4gICAgICAgICAgJ1NlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtbmF0aXZlLWNvbW11bml0eS9yZWFjdC1uYXRpdmUtbmV0aW5mbycsXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8vICRGbG93Rml4TWUgVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW4gYXR0ZW1wdGluZyB0byBhY2Nlc3MgQ2FtZXJhUm9sbC5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnQ2FtZXJhUm9sbCcsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ0NhbWVyYVJvbGwgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIFJlYWN0IE5hdGl2ZS4gJyArXG4gICAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAncmVhY3QtbmF0aXZlLWNhbWVyYXJvbGwnIGluc3RlYWQgb2YgJ3JlYWN0LW5hdGl2ZScuIFwiICtcbiAgICAgICAgICAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtY29tbXVuaXR5L3JlYWN0LW5hdGl2ZS1jYW1lcmFyb2xsJyxcbiAgICAgICk7XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gJEZsb3dGaXhNZSBUaGlzIGlzIGludGVudGlvbmFsOiBGbG93IHdpbGwgZXJyb3Igd2hlbiBhdHRlbXB0aW5nIHRvIGFjY2VzcyBJbWFnZVN0b3JlLlxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdJbWFnZVN0b3JlJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnSW1hZ2VTdG9yZSBoYXMgYmVlbiByZW1vdmVkIGZyb20gUmVhY3QgTmF0aXZlLiAnICtcbiAgICAgICAgICAnVG8gZ2V0IGEgYmFzZTY0LWVuY29kZWQgc3RyaW5nIGZyb20gYSBsb2NhbCBpbWFnZSB1c2UgZWl0aGVyIG9mIHRoZSBmb2xsb3dpbmcgdGhpcmQtcGFydHkgbGlicmFyaWVzOicgK1xuICAgICAgICAgIFwiKiBleHBvLWZpbGUtc3lzdGVtOiBgcmVhZEFzU3RyaW5nQXN5bmMoZmlsZXBhdGgsICdiYXNlNjQnKWBcIiArXG4gICAgICAgICAgXCIqIHJlYWN0LW5hdGl2ZS1mczogYHJlYWRGaWxlKGZpbGVwYXRoLCAnYmFzZTY0JylgXCIsXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8vICRGbG93Rml4TWUgVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW4gYXR0ZW1wdGluZyB0byBhY2Nlc3MgSW1hZ2VFZGl0b3IuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ0ltYWdlRWRpdG9yJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnSW1hZ2VFZGl0b3IgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIFJlYWN0IE5hdGl2ZS4gJyArXG4gICAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAncmVhY3QtbmF0aXZlLWltYWdlLWVkaXRvcicgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLWltYWdlLWVkaXRvcicsXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xuXG4gIC8vICRGbG93Rml4TWUgVGhpcyBpcyBpbnRlbnRpb25hbDogRmxvdyB3aWxsIGVycm9yIHdoZW4gYXR0ZW1wdGluZyB0byBhY2Nlc3MgVmlld1BhZ2VyQW5kcm9pZC5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAnVmlld1BhZ2VyQW5kcm9pZCcsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0KCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ1ZpZXdQYWdlckFuZHJvaWQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIFJlYWN0IE5hdGl2ZS4gJyArXG4gICAgICAgICAgXCJJdCBjYW4gbm93IGJlIGluc3RhbGxlZCBhbmQgaW1wb3J0ZWQgZnJvbSAncmVhY3QtbmF0aXZlLXZpZXdwYWdlcicgaW5zdGVhZCBvZiAncmVhY3QtbmF0aXZlJy4gXCIgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0LW5hdGl2ZS1jb21tdW5pdHkvcmVhY3QtbmF0aXZlLXZpZXdwYWdlcicsXG4gICAgICApO1xuICAgIH0sXG4gIH0pO1xufVxuIl19